//웹 애플리케이션의 성능이 서서히 낮아지는 메모리 누수(memory leak),
//성능이 일정하게 낮은 형태인 memory bloat가 메모리 관리가 제대로 되지 않을 때 나타나는 현상이다.

//자바스크립트는 객체가 생성되는 시점에 자동으로 메모리를 할당하고, 쓸모가 없어지면 자동으로 메모리를 해제한다(가비지 콜렉션)

//메모리 할당 시점
//자바스크립트는 값을 선언할 때 자동으로 메모리를 할당한다.
let num = 14; //숫자형 데이터를 담기 위한 메모리 할당
let str = "jeremy"; //문자열을 담기 위한 메모리 할당
let o = {
  //오브젝트와 그 오브젝트에 포함된 값들을 담기 위한 메모리 할당
  n1: 1,
  n2: 4,
};
let a = [1, 2, 3]; //배열과 배열에 담긴 값들을 위한 메모리 할당
function sum(n1, n2) {
  //함수를 위한 메모리 할당(함수는 호출 가능한 오브젝트이다)
  return n1 + n2;
}
let d = new Date(); //Date 객체를 위해 메모리 할당

//스택(Stack) 메모리
//정적 메모리 할당 시 사용된다. 자바스크립트에서 배열, 오브젝트, Map, Set 같은 객체는 저장되는 데이터가 가변적으로 변할 수 있다.
//하지만 문자열(String), 숫자형(Number), Boolean, undefined, null 같은 데이터는 데이터의 크기가 유한하고 정적이기 때문에
//스택 메모리에 저장된다. 스택 메모리는 LIFO 방식을 사용한다.

//힙(Heap) 메모리
//힙 메모리는 동적 메모리 할당에 사용되며 실제 데이터가 저장되는 위치에 대한 참조(포인터)를 저장한다.
//스택에 비해 데이터를 처리하고 접근하는 속도는 느리지만, 더 큰 용량의 데이터를 저장할 수 있다.
//자바스크립트에서 배열, 오브젝트, Map, Set과 같은 객체는 저장되는 데이터가 동적으로 변할 수 있기 때문에
//사용하는 시점에 얼마큼의 데이터 저장 공간이 필요한지 알 수 없다.
//따라서 실제 데이터가 저장되는 메모리 공간과 이 위치를 알 수 있는 참조 값을 저장하는 메모리 공간을 사용한다.
//특히 힙 메모리를 사용하는 경우 메모리를 더 이상 사용하지 않게 되면 개발자가 직접 해제해야 메모리를 효율적으로 관리할 수 있다.
//자바스크립트에서는 힙 메모리를 사용하는 변수에 null을 할당하면 메모리를 해제할 수 있다.

//아래는 chatGpt 설명
/*
스택 메모리:
원시 데이터 타입(Number, String, Boolean, undefined, null)은 스택 메모리에 저장되지만, 
문자열의 경우 짧을 때는 스택에 저장되고, 긴 문자열은 힙에 저장됩니다.
스택에는 값이나 **참조(포인터)**가 저장되며, 참조 타입(객체, 배열 등)의 참조 값만 스택에 저장되고, 실제 데이터는 힙에 저장됩니다.
스택 메모리는 LIFO(Last In, First Out) 방식으로 동작합니다.

힙 메모리:
객체, 배열, Map, Set 같은 참조 타입의 데이터는 힙 메모리에 저장됩니다.
힙은 동적으로 크기가 변하는 데이터에 적합하며, 크기에 대한 제약이 덜합니다.
자바스크립트는 가비지 컬렉션을 사용하여 메모리를 자동으로 관리합니다. 개발자가 직접 메모리를 해제하지 않아도 됩니다. 
하지만, 참조를 끊기 위해 null을 할당하는 것은 가비지 컬렉터가 해당 객체를 해제할 수 있도록 도와주는 역할을 할 수 있습니다.
*/
